generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            String          @id @default(uuid())
  name          String          @unique
  email         String          @unique
  Branch        Branch[]
  FinancialYear FinancialYear[]
  User          User[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Branch {
  id               String             @id @default(uuid())
  name             String             @unique
  address          String             @unique
  company          Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserBranchAccess UserBranchAccess[]
  Brand            Brand[]
  Category         Category[]
  Product          Product[]
  Godown           Godown[]
  Unit             Unit[]
  ProductBook      ProductBook[]
  JournalBook      JournalBook[]
  InvoiceBook      InvoiceBook[]
  AccountGroup     AccountGroup[]
  Ledger           Ledger[]
  VoucherBook      VoucherBook[]

  @@index([companyId])
}

model FinancialYear {
  id          String        @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ProductBook ProductBook[]
  JournalBook JournalBook[]
  InvoiceBook InvoiceBook[]
  VoucherBook VoucherBook[]

  @@index([companyId])
}

model User {
  id        String             @id @default(uuid())
  name      String
  email     String             @unique
  password  String
  role      Role
  company   Company            @relation(fields: [companyId], references: [id])
  companyId String
  access    UserBranchAccess[]
  isActive  Boolean            @default(true)
  createdBy String?
  updatedBy String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  createdBrands               Brand[]              @relation("BrandCreatedBy")
  updatedBrands               Brand[]              @relation("BrandUpdatedBy")
  createdCategory             Category[]           @relation("CategoryCreatedBy")
  updatedCategory             Category[]           @relation("CategoryUpdatedBy")
  createdUnits                Unit[]               @relation("UnitCreatedBy")
  updatedUnits                Unit[]               @relation("UnitUpdatedBy")
  createdProducts             Product[]            @relation("ProductCreatedBy")
  updatedProducts             Product[]            @relation("ProductUpdatedBy")
  createdGodowns              Godown[]             @relation("GodownCreatedBy")
  updatedGodowns              Godown[]             @relation("GodownUpdatedBy")
  createdStocks               ProductStock[]       @relation("ProductStockCreatedBy")
  updatedStocks               ProductStock[]       @relation("ProductStockUpdatedBy")
  createdJournalBooks         JournalBook[]        @relation("JournalBookCreatedBy")
  updatedJournalBooks         JournalBook[]        @relation("JournalBookUpdatedBy")
  createdEntries              JournalEntry[]       @relation("JournalEntryCreatedBy")
  updatedEntries              JournalEntry[]       @relation("JournalEntryUpdatedBy")
  createdProductBooks         ProductBook[]        @relation("ProductBookCreatedBy")
  updatedProductBooks         ProductBook[]        @relation("ProductBookUpdatedBy")
  createdProductLedgerEntries ProductLedgerEntry[] @relation("ProductLedgerEntryCreatedBy")
  updatedProductLedgerEntries ProductLedgerEntry[] @relation("ProductLedgerEntryUpdatedBy")
  createdInvoiceBooks         InvoiceBook[]        @relation("InvoiceBookCreatedBy")
  updatedInvoiceBooks         InvoiceBook[]        @relation("InvoiceBookUpdatedBy")
  createdInvoices             Invoice[]            @relation("InvoiceCreatedBy")
  updatedInvoices             Invoice[]            @relation("InvoiceUpdatedBy")
  createdInvoiceItem          InvoiceItem[]        @relation("InvoiceItemCreatedBy")
  updatedInvoiceItem          InvoiceItem[]        @relation("InvoiceItemUpdatedBy")
  createdVoucherBooks         VoucherBook[]        @relation("VoucherBookCreatedBy")
  updatedVoucherBooks         VoucherBook[]        @relation("VoucherBookUpdatedBy")
  createdVouchers             Voucher[]            @relation("VoucherCreatedBy")
  updatedVouchers             Voucher[]            @relation("VoucherUpdatedBy")
  createdVoucherEntries       VoucherEntry[]       @relation("VoucherEntryCreatedBy")
  updatedVoucherEntries       VoucherEntry[]       @relation("VoucherEntryUpdatedBy")
  ProductLedgerEntry          ProductLedgerEntry[]

  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

enum Role {
  owner
  admin
  manager
  viewer
}

model UserBranchAccess {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  branch    Branch   @relation(fields: [branchId], references: [id])
  branchId  String
  createdBy String?
  updatedBy String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  abb       String
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId  String
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  Product   Product[]

  createdByUser User? @relation("BrandCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("BrandUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([name, branchId])
  @@unique([abb, branchId])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  abb       String
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId  String
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  Product   Product[]

  createdByUser User? @relation("CategoryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("CategoryUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([name, branchId])
  @@unique([abb, branchId])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model Unit {
  id           String         @id @default(uuid())
  name         String
  abb          String
  branch       Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId     String
  createdBy    String?
  updatedBy    String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  Product      Product[]
  ProductStock ProductStock[]

  createdByUser User?         @relation("UnitCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?         @relation("UnitUpdatedBy", fields: [updatedBy], references: [id])
  InvoiceItem   InvoiceItem[]

  @@unique([name, branchId])
  @@unique([abb, branchId])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model Product {
  id                   String               @id @default(uuid())
  name                 String
  hsn                  Int                  @default(autoincrement())
  unit                 Unit                 @relation(fields: [unitId], references: [id])
  unitId               String
  brand                Brand                @relation(fields: [brandId], references: [id])
  brandId              String
  category             Category             @relation(fields: [categoryId], references: [id])
  categoryId           String
  branch               Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId             String
  saleRate             Float
  previousPurchaseRate Float?               @default(0)
  qty                  Float                @default(0)
  thaan                Int                  @default(0)
  createdBy            String?
  updatedBy            String?
  isActive             Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @default(now())
  ProductStock         ProductStock[]
  ProductLedgerEntry   ProductLedgerEntry[]
  InvoiceItem          InvoiceItem[]

  // Add this line for GodownTransfer relation:
  godownTransfers GodownTransfer[]

  createdByUser User? @relation("ProductCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("ProductUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([name, brandId, branchId])
  @@index([isActive])
}

model Godown {
  id                 String               @id @default(uuid())
  name               String               @unique
  address            String               @unique
  branch             Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId           String
  createdBy          String?
  updatedBy          String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  ProductStock       ProductStock[]
  ProductLedgerEntry ProductLedgerEntry[]

  // Add these two lines for GodownTransfer relations:
  godownTransfersFrom GodownTransfer[] @relation("GodownTransferFrom")
  godownTransfersTo   GodownTransfer[] @relation("GodownTransferTo")

  createdByUser User?         @relation("GodownCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?         @relation("GodownUpdatedBy", fields: [updatedBy], references: [id])
  InvoiceItem   InvoiceItem[]

  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model ProductStock {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  godown    Godown   @relation(fields: [godownId], references: [id])
  godownId  String
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
  qty       Float    @default(0)
  thaan     Int      @default(0)
  createdBy String?
  updatedBy String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser User? @relation("ProductStockCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("ProductStockUpdatedBy", fields: [updatedBy], references: [id])

  @@index([productId])
  @@index([godownId])
  @@index([unitId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model AccountGroup {
  id        String             @id @default(uuid())
  name      String
  code      String
  balance   Decimal            @default(0)
  nature    AccountGroupNature
  groupType AccountGroupType?
  parent    AccountGroup?      @relation("GroupHierarchy", fields: [parentId], references: [id])
  parentId  String?
  children  AccountGroup[]     @relation("GroupHierarchy")
  branch    Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId  String
  Ledger    Ledger[]
  createdBy String?
  updatedBy String?
  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([name, parentId, branchId])
  @@index([parentId])
  @@index([branchId])
  @@index([isActive])
  @@index([groupType])
}

enum AccountGroupNature {
  Assets
  Liabilities
  Capital
  Expenses
  Income
  Drawings
}

enum AccountGroupType {
  CapitalAccount
  LoansLiabilities
  CurrentLiabilities
  FixedAssets
  Investments
  CurrentAssets
  BranchDivisions
  MiscExpensesAssets
  SalesAccounts
  PurchaseAccounts
  DirectIncomes
  IndirectIncomes
  DirectExpenses
  IndirectExpenses
  SuspenseAccount
  DutiesTaxes
  Provisions
  BankAccounts
  CashInHand
  Deposits
  SecuredLoans
  UnsecuredLoans
  AccountsReceivable
  AccountsPayable
}

model ProductBook {
  id              String               @id @default(uuid())
  yearLabel       String
  financialYear   FinancialYear        @relation(fields: [financialYearId], references: [id], onDelete: Cascade)
  financialYearId String
  branch          Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId        String
  entries         ProductLedgerEntry[]
  godownTransfers GodownTransfer[]
  createdBy       String?
  updatedBy       String?
  isActive        Boolean              @default(true)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now())

  createdByUser User? @relation("ProductBookCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("ProductBookUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([financialYearId, branchId])
  @@index([financialYearId])
  @@index([branchId])
  @@index([isActive])
}

model ProductLedgerEntry {
  id            String          @id @default(uuid())
  product       Product         @relation(fields: [productId], references: [id])
  productId     String
  productBook   ProductBook     @relation(fields: [productBookId], references: [id])
  productBookId String
  godown        Godown          @relation(fields: [godownId], references: [id])
  godownId      String
  date          DateTime
  type          LedgerEntryType
  qty           Float
  thaan         Int
  previousQty   Float
  previousThaan Int
  finalQty      Float
  finalThaan    Int
  rate          Float
  narration     String?
  createdBy     String?
  updatedBy     String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())

  createdByUser User?    @relation("ProductLedgerEntryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?    @relation("ProductLedgerEntryUpdatedBy", fields: [updatedBy], references: [id])
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
  invoice       Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId     String?

  @@index([productId])
  @@index([productBookId])
  @@index([godownId])
  @@index([invoiceId])
}

enum LedgerEntryType {
  IN
  OUT
}

model Ledger {
  id             String       @id @default(uuid())
  name           String
  code           String       @unique
  type           LedgerType
  phone1         String
  phone2         String
  balance        Decimal
  openingBalance Decimal
  accountGroup   AccountGroup @relation(fields: [accountGroupId], references: [id])
  accountGroupId String
  branch         Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId       String
  isActive       Boolean      @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  JournalEntry JournalEntry[]

  Invoice       Invoice[] @relation("LedgerInvoice")
  InvoiceLedger Invoice[] @relation("LedgerInvoiceLedger")

  VoucherEntry VoucherEntry[]

  @@unique([name, branchId])
  @@index([accountGroupId])
  @@index([branchId])
  @@index([isActive])
}

enum LedgerType {
  Cash
  Bank
  AccountsReceivable
  Inventory
  FixedAssets
  PrepaidExpenses
  AdvanceToSuppliers
  AccountsPayable
  AccruedExpenses
  LoansPayable
  GSTPayable
  TDSPayable
  AdvanceFromCustomers
  OwnerCapital
  RetainedEarnings
  Drawings
  Reserves
  Sales
  InterestIncome
  CommissionReceived
  RentalIncome
  OtherIncome
  Purchase
  Wages
  Rent
  Electricity
  Telephone
  Transportation
  RepairsAndMaintenance
  Depreciation
  MiscellaneousExpenses
}

model JournalBook {
  id              String         @id @default(uuid())
  yearLabel       String
  financialYear   FinancialYear  @relation(fields: [financialYearId], references: [id], onDelete: Cascade)
  financialYearId String
  branch          Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId        String
  entries         JournalEntry[]
  createdBy       String?
  updatedBy       String?
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())

  createdByUser User? @relation("JournalBookCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("JournalBookUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([financialYearId, branchId])
  @@index([financialYearId])
  @@index([branchId])
  @@index([isActive])
}

model JournalEntry {
  id            String      @id @default(uuid())
  date          DateTime    @default(now())
  journal       JournalBook @relation(fields: [journalBookId], references: [id])
  journalBookId String
  ledger        Ledger      @relation(fields: [ledgerId], references: [id])
  ledgerId      String
  type          EntryType
  amount        Float
  narration     String?
  isActive      Boolean     @default(true)
  createdBy     String?
  updatedBy     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  createdByUser User? @relation("JournalEntryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("JournalEntryUpdatedBy", fields: [updatedBy], references: [id])

  @@index([journalBookId])
  @@index([ledgerId])
  @@index([isActive])
}

enum EntryType {
  DEBIT
  CREDIT
}

model InvoiceBook {
  id              String        @id @default(uuid())
  yearLabel       String
  financialYear   FinancialYear @relation(fields: [financialYearId], references: [id], onDelete: Cascade)
  financialYearId String
  branch          Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId        String
  type            InvoiceType
  invoices        Invoice[]
  createdBy       String?
  updatedBy       String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())

  createdByUser User? @relation("InvoiceBookCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("InvoiceBookUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([financialYearId, branchId, type])
  @@index([financialYearId])
  @@index([branchId])
  @@index([isActive])
}

enum InvoiceType {
  PURCHASE
  SALE
  PURCHASE_RETURN
  SALE_RETURN
}

model Invoice {
  id            String      @id @default(uuid())
  invoiceNumber String
  date          DateTime
  type          InvoiceType
  invoiceBook   InvoiceBook @relation(fields: [invoiceBookId], references: [id])
  invoiceBookId String

  ledger   Ledger? @relation("LedgerInvoice", fields: [ledgerId], references: [id])
  ledgerId String?

  invoiceLedger   Ledger? @relation("LedgerInvoiceLedger", fields: [invoiceLedgerId], references: [id])
  invoiceLedgerId String?

  totalAmount Float
  discount    Float         @default(0)
  cartage     Float         @default(0)
  grandTotal  Float
  narration   String?
  items       InvoiceItem[]
  createdBy   String?
  updatedBy   String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())

  createdByUser      User?                @relation("InvoiceCreatedBy", fields: [createdBy], references: [id])
  updatedByUser      User?                @relation("InvoiceUpdatedBy", fields: [updatedBy], references: [id])
  ProductLedgerEntry ProductLedgerEntry[]
  Voucher            Voucher[]

  @@unique([invoiceBookId, invoiceNumber])
  @@index([invoiceBookId, date])
  @@index([ledgerId, isActive])
  @@index([type, date, invoiceNumber])
  @@index([createdAt])
}

model InvoiceItem {
  id        String   @id @default(uuid())
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Float
  thaan     Int      @default(0)
  godown    Godown   @relation(fields: [godownId], references: [id])
  godownId  String
  rate      Float
  discount  Float    @default(0)
  taxAmount Float   @default(0)
  amount    Float
  createdBy String?
  updatedBy String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser User?   @relation("InvoiceItemCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?   @relation("InvoiceItemUpdatedBy", fields: [updatedBy], references: [id])
  Unit          Unit?   @relation(fields: [unitId], references: [id])
  unitId        String?

  @@index([invoiceId])
  @@index([productId])
  @@index([isActive])
}

model VoucherBook {
  id              String        @id @default(uuid())
  yearLabel       String
  financialYear   FinancialYear @relation(fields: [financialYearId], references: [id], onDelete: Cascade)
  financialYearId String
  branch          Branch        @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId        String
  type            VoucherType
  vouchers        Voucher[]
  createdBy       String?
  updatedBy       String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())

  createdByUser User? @relation("VoucherBookCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("VoucherBookUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([financialYearId, branchId, type])
  @@index([financialYearId])
  @@index([branchId])
  @@index([isActive])
}

enum VoucherType {
  PAYMENT
  RECEIPT
  CONTRA
  JOURNAL
  CREDIT_NOTE
  DEBIT_NOTE
}

model Voucher {
  id            String         @id @default(uuid())
  voucherNumber String
  date          DateTime
  type          VoucherType
  voucherBook   VoucherBook    @relation(fields: [voucherBookId], references: [id])
  voucherBookId String
  reference     String?
  narration     String?
  totalAmount   Float
  entries       VoucherEntry[]
  createdBy     String?
  updatedBy     String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())

  createdByUser User? @relation("VoucherCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("VoucherUpdatedBy", fields: [updatedBy], references: [id])

  // Link to related invoice if applicable
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?

  @@unique([voucherBookId, voucherNumber])
  @@index([voucherBookId, date])
  @@index([type, date])
  @@index([invoiceId])
  @@index([isActive])
}

model VoucherEntry {
  id        String    @id @default(uuid())
  voucher   Voucher   @relation(fields: [voucherId], references: [id])
  voucherId String
  ledger    Ledger    @relation(fields: [ledgerId], references: [id])
  ledgerId  String
  type      EntryType
  amount    Float
  narration String?
  createdBy String?
  updatedBy String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  createdByUser User? @relation("VoucherEntryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("VoucherEntryUpdatedBy", fields: [updatedBy], references: [id])

  @@index([voucherId])
  @@index([ledgerId])
  @@index([isActive])
}

model GodownTransfer {
  id            String   @id @default(uuid())
  fromGodownId  String
  toGodownId    String
  productId     String
  quantity      Float
  thaan         Int      @default(0)
  narration     String?
  transferDate  DateTime @default(now())
  createdBy     String?
  productBookId String?

  fromGodown  Godown       @relation("GodownTransferFrom", fields: [fromGodownId], references: [id])
  toGodown    Godown       @relation("GodownTransferTo", fields: [toGodownId], references: [id])
  product     Product      @relation(fields: [productId], references: [id])
  productBook ProductBook? @relation(fields: [productBookId], references: [id])

  @@index([fromGodownId])
  @@index([toGodownId])
  @@index([productId])
  @@index([productBookId])
}
