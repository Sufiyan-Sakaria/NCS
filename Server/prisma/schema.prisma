generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            String          @id @default(uuid())
  name          String
  email         String
  Branch        Branch[]
  FinancialYear FinancialYear[]
  User          User[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([name])
  @@unique([email])
}

model Branch {
  id               String             @id @default(uuid())
  name             String             @unique
  address          String             @unique
  company          Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserBranchAccess UserBranchAccess[]
  Brand            Brand[]
  Category         Category[]
  Product          Product[]
  Godown           Godown[]
  Unit             Unit[]
  ProductLedger    ProductLedger[]
  Journal          Journal[]

  @@index([companyId])
}

model FinancialYear {
  id            String          @id @default(uuid())
  startDate     DateTime
  endDate       DateTime
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProductLedger ProductLedger[]
  Journal       Journal[]

  @@index([companyId])
}

model User {
  id        String             @id @default(uuid())
  name      String
  email     String             @unique
  password  String
  role      Role
  company   Company            @relation(fields: [companyId], references: [id])
  companyId String
  access    UserBranchAccess[]
  createdBy String?
  updatedBy String?
  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([createdBy])
  @@index([updatedBy])
}

enum Role {
  owner
  admin
  manager
  viewer
}

model UserBranchAccess {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  branch    Branch   @relation(fields: [branchId], references: [id])
  branchId  String
  createdBy String?
  updatedBy String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, branchId])
  @@index([createdBy])
  @@index([updatedBy])
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  abb       String
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId  String
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  Product   Product[]

  @@unique([name, branchId])
  @@unique([abb, branchId])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  abb       String
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId  String
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  Product   Product[]

  @@unique([name, branchId])
  @@unique([abb, branchId])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
}

model Unit {
  id           String         @id @default(uuid())
  name         String
  abb          String
  branch       Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId     String
  createdBy    String?
  updatedBy    String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Product      Product[]
  ProductStock ProductStock[]

  @@unique([name, branchId])
  @@unique([abb, branchId])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
}

model Product {
  id                 String               @id @default(uuid())
  name               String
  hsn                Int                  @default(autoincrement())
  unit               Unit                 @relation(fields: [unitId], references: [id])
  unitId             String
  brand              Brand                @relation(fields: [brandId], references: [id])
  brandId            String
  category           Category             @relation(fields: [categoryId], references: [id])
  categoryId         String
  branch             Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId           String
  saleRate           Float
  qty                Float                @default(0)
  thaan              Int                  @default(0)
  createdBy          String?
  updatedBy          String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ProductStock       ProductStock[]
  ProductLedgerEntry ProductLedgerEntry[]

  @@unique([name, branchId])
}

model Godown {
  id                 String               @id @default(uuid())
  name               String               @unique
  address            String               @unique
  branch             Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId           String
  createdBy          String?
  updatedBy          String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ProductStock       ProductStock[]
  ProductLedgerEntry ProductLedgerEntry[]

  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
}

model ProductStock {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  godown    Godown   @relation(fields: [godownId], references: [id])
  godownId  String
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
  qty       Float    @default(0)
  thaan     Int      @default(0)
  createdBy String?
  updatedBy String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([godownId])
  @@index([unitId])
  @@index([createdBy])
  @@index([updatedBy])
}

model AccountGroup {
  id        String             @id @default(uuid())
  name      String
  nature    AccountGroupNature
  parent    AccountGroup?      @relation("GroupHierarchy", fields: [parentId], references: [id])
  parentId  String?
  children  AccountGroup[]     @relation("GroupHierarchy")
  Ledger    Ledger[]
  createdBy String?
  updatedBy String?
  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([name, parentId])
  @@index([parentId])
}

enum AccountGroupNature {
  Assets
  Liabilities
  Capital
  Expenses
  Income
}

model ProductLedger {
  id              String               @id @default(uuid())
  yearLabel       String
  financialYear   FinancialYear        @relation(fields: [financialYearId], references: [id], onDelete: Cascade)
  financialYearId String
  branch          Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId        String
  entries         ProductLedgerEntry[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@unique([financialYearId, branchId])
  @@index([financialYearId])
  @@index([branchId])
}

model ProductLedgerEntry {
  id              String          @id @default(uuid())
  product         Product         @relation(fields: [productId], references: [id])
  productId       String
  productLedger   ProductLedger   @relation(fields: [productLedgerId], references: [id])
  productLedgerId String
  godown          Godown          @relation(fields: [godownId], references: [id])
  godownId        String
  date            DateTime
  type            LedgerEntryType
  qty             Float
  thaan           Int
  narration       String?
  createdBy       String?
  updatedBy       String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([productId])
  @@index([productLedgerId])
  @@index([godownId])
}

enum LedgerEntryType {
  IN
  OUT
}

model Ledger {
  id             String         @id @default(uuid())
  name           String         @unique
  code           String         @unique
  type           LedgerType
  phone1         String
  phone2         String
  balance        Decimal
  openingBalance Decimal
  accountGroup   AccountGroup   @relation(fields: [accountGroupId], references: [id])
  accountGroupId String
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  JournalEntry   JournalEntry[]

  @@index([accountGroupId])
}

enum LedgerType {
  // Assets
  Cash
  Bank
  AccountsReceivable
  Inventory
  FixedAssets
  PrepaidExpenses
  AdvanceToSuppliers

  // Liabilities
  AccountsPayable
  AccruedExpenses
  LoansPayable
  GSTPayable
  TDSPayable
  AdvanceFromCustomers

  // Capital
  OwnerCapital
  RetainedEarnings
  Drawings
  Reserves

  // Income
  Sales
  InterestIncome
  CommissionReceived
  RentalIncome
  OtherIncome

  // Expenses
  Purchase
  Wages
  Rent
  Electricity
  Telephone
  Transportation
  RepairsAndMaintenance
  Depreciation
  MiscellaneousExpenses
}

model Journal {
  id              String         @id @default(uuid())
  label           String
  date            DateTime
  financialYear   FinancialYear  @relation(fields: [financialYearId], references: [id], onDelete: Cascade)
  financialYearId String
  branch          Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId        String
  entries         JournalEntry[]
  narration       String?
  createdBy       String?
  updatedBy       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([financialYearId])
  @@index([branchId])
}

model JournalEntry {
  id        String    @id @default(uuid())
  journal   Journal   @relation(fields: [journalId], references: [id])
  journalId String
  ledger    Ledger    @relation(fields: [ledgerId], references: [id])
  ledgerId  String
  type      EntryType
  amount    Float
  narration String?
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([journalId])
  @@index([ledgerId])
}

enum EntryType {
  DEBIT
  CREDIT
}
