generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            String          @id @default(uuid())
  name          String          @unique
  email         String          @unique
  Branch        Branch[]
  FinancialYear FinancialYear[]
  User          User[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Branch {
  id               String             @id @default(uuid())
  name             String             @unique
  address          String             @unique
  company          Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserBranchAccess UserBranchAccess[]
  Brand            Brand[]
  Category         Category[]
  Product          Product[]
  Godown           Godown[]
  Unit             Unit[]
  ProductLedger    ProductLedger[]
  Journal          Journal[]
  AccountGroup     AccountGroup[]
  Ledger           Ledger[]

  @@index([companyId])
}

model FinancialYear {
  id            String          @id @default(uuid())
  startDate     DateTime
  endDate       DateTime
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProductLedger ProductLedger[]
  Journal       Journal[]

  @@index([companyId])
}

model User {
  id        String             @id @default(uuid())
  name      String
  email     String             @unique
  password  String
  role      Role
  company   Company            @relation(fields: [companyId], references: [id])
  companyId String
  access    UserBranchAccess[]
  isActive  Boolean            @default(true)
  createdBy String?
  updatedBy String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  createdBrands               Brand[]              @relation("BrandCreatedBy")
  updatedBrands               Brand[]              @relation("BrandUpdatedBy")
  createdCategory             Category[]           @relation("CategoryCreatedBy")
  updatedCategory             Category[]           @relation("CategoryUpdatedBy")
  createdUnits                Unit[]               @relation("UnitCreatedBy")
  updatedUnits                Unit[]               @relation("UnitUpdatedBy")
  createdProducts             Product[]            @relation("ProductCreatedBy")
  updatedProducts             Product[]            @relation("ProductUpdatedBy")
  createdGodowns              Godown[]             @relation("GodownCreatedBy")
  updatedGodowns              Godown[]             @relation("GodownUpdatedBy")
  createdStocks               ProductStock[]       @relation("ProductStockCreatedBy")
  updatedStocks               ProductStock[]       @relation("ProductStockUpdatedBy")
  createdJournals             Journal[]            @relation("JournalCreatedBy")
  updatedJournals             Journal[]            @relation("JournalUpdatedBy")
  createdEntries              JournalEntry[]       @relation("JournalEntryCreatedBy")
  updatedEntries              JournalEntry[]       @relation("JournalEntryUpdatedBy")
  ProductLedgerEntry          ProductLedgerEntry[]
  createdProductLedgerEntries ProductLedgerEntry[] @relation("ProductLedgerEntryCreatedBy")
  updatedProductLedgerEntries ProductLedgerEntry[] @relation("ProductLedgerEntryUpdatedBy")

  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

enum Role {
  owner
  admin
  manager
  viewer
}

model UserBranchAccess {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  branch    Branch   @relation(fields: [branchId], references: [id])
  branchId  String
  createdBy String?
  updatedBy String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  abb       String
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId  String
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  Product   Product[]

  createdByUser User? @relation("BrandCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("BrandUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([name, branchId])
  @@unique([abb, branchId])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  abb       String
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId  String
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  Product   Product[]

  createdByUser User? @relation("CategoryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("CategoryUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([name, branchId])
  @@unique([abb, branchId])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model Unit {
  id           String         @id @default(uuid())
  name         String
  abb          String
  branch       Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId     String
  createdBy    String?
  updatedBy    String?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Product      Product[]
  ProductStock ProductStock[]

  createdByUser User? @relation("UnitCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("UnitUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([name, branchId])
  @@unique([abb, branchId])
  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model Product {
  id                 String               @id @default(uuid())
  name               String
  hsn                Int                  @default(autoincrement())
  unit               Unit                 @relation(fields: [unitId], references: [id])
  unitId             String
  brand              Brand                @relation(fields: [brandId], references: [id])
  brandId            String
  category           Category             @relation(fields: [categoryId], references: [id])
  categoryId         String
  branch             Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId           String
  saleRate           Float
  qty                Float                @default(0)
  thaan              Int                  @default(0)
  createdBy          String?
  updatedBy          String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ProductStock       ProductStock[]
  ProductLedgerEntry ProductLedgerEntry[]

  createdByUser User? @relation("ProductCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("ProductUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([name, branchId])
  @@index([isActive])
}

model Godown {
  id                 String               @id @default(uuid())
  name               String               @unique
  address            String               @unique
  branch             Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId           String
  createdBy          String?
  updatedBy          String?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ProductStock       ProductStock[]
  ProductLedgerEntry ProductLedgerEntry[]

  createdByUser User? @relation("GodownCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("GodownUpdatedBy", fields: [updatedBy], references: [id])

  @@index([branchId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model ProductStock {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  godown    Godown   @relation(fields: [godownId], references: [id])
  godownId  String
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
  qty       Float    @default(0)
  thaan     Int      @default(0)
  createdBy String?
  updatedBy String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser User? @relation("ProductStockCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("ProductStockUpdatedBy", fields: [updatedBy], references: [id])

  @@index([productId])
  @@index([godownId])
  @@index([unitId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
}

model AccountGroup {
  id        String             @id @default(uuid())
  name      String
  code      String
  balance   Decimal
  nature    AccountGroupNature
  parent    AccountGroup?      @relation("GroupHierarchy", fields: [parentId], references: [id])
  parentId  String?
  children  AccountGroup[]     @relation("GroupHierarchy")
  branch    Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId  String
  Ledger    Ledger[]
  createdBy String?
  updatedBy String?
  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@unique([name, parentId, branchId])
  @@index([parentId])
  @@index([branchId])
  @@index([isActive])
}

enum AccountGroupNature {
  Assets
  Liabilities
  Capital
  Expenses
  Income
}

model ProductLedger {
  id              String               @id @default(uuid())
  yearLabel       String
  financialYear   FinancialYear        @relation(fields: [financialYearId], references: [id], onDelete: Cascade)
  financialYearId String
  branch          Branch               @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId        String
  entries         ProductLedgerEntry[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@unique([financialYearId, branchId])
  @@index([financialYearId])
  @@index([branchId])
}

model ProductLedgerEntry {
  id              String          @id @default(uuid())
  product         Product         @relation(fields: [productId], references: [id])
  productId       String
  productLedger   ProductLedger   @relation(fields: [productLedgerId], references: [id])
  productLedgerId String
  godown          Godown          @relation(fields: [godownId], references: [id])
  godownId        String
  date            DateTime
  type            LedgerEntryType
  qty             Float
  thaan           Int
  narration       String?
  createdBy       String?
  updatedBy       String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  createdByUser User?   @relation("ProductLedgerEntryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?   @relation("ProductLedgerEntryUpdatedBy", fields: [updatedBy], references: [id])
  User          User?   @relation(fields: [userId], references: [id])
  userId        String?

  @@index([productId])
  @@index([productLedgerId])
  @@index([godownId])
}

enum LedgerEntryType {
  IN
  OUT
}

model Ledger {
  id             String         @id @default(uuid())
  name           String
  code           String         @unique
  type           LedgerType
  phone1         String
  phone2         String
  balance        Decimal
  openingBalance Decimal
  accountGroup   AccountGroup   @relation(fields: [accountGroupId], references: [id])
  accountGroupId String
  branch         Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId       String
  isActive       Boolean        @default(true)
  createdBy      String?
  updatedBy      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  JournalEntry   JournalEntry[]

  @@unique([name, branchId])
  @@index([accountGroupId])
  @@index([branchId])
  @@index([isActive])
}

enum LedgerType {
  Cash
  Bank
  AccountsReceivable
  Inventory
  FixedAssets
  PrepaidExpenses
  AdvanceToSuppliers
  AccountsPayable
  AccruedExpenses
  LoansPayable
  GSTPayable
  TDSPayable
  AdvanceFromCustomers
  OwnerCapital
  RetainedEarnings
  Drawings
  Reserves
  Sales
  InterestIncome
  CommissionReceived
  RentalIncome
  OtherIncome
  Purchase
  Wages
  Rent
  Electricity
  Telephone
  Transportation
  RepairsAndMaintenance
  Depreciation
  MiscellaneousExpenses
}

model Journal {
  id              String         @id @default(uuid())
  label           String
  date            DateTime
  financialYear   FinancialYear  @relation(fields: [financialYearId], references: [id], onDelete: Cascade)
  financialYearId String
  branch          Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId        String
  entries         JournalEntry[]
  narration       String?
  isActive        Boolean        @default(true)
  createdBy       String?
  updatedBy       String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  createdByUser User? @relation("JournalCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("JournalUpdatedBy", fields: [updatedBy], references: [id])

  @@index([financialYearId])
  @@index([branchId])
  @@index([isActive])
}

model JournalEntry {
  id        String    @id @default(uuid())
  journal   Journal   @relation(fields: [journalId], references: [id])
  journalId String
  ledger    Ledger    @relation(fields: [ledgerId], references: [id])
  ledgerId  String
  type      EntryType
  amount    Float
  narration String?
  isActive  Boolean   @default(true)
  createdBy String?
  updatedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  createdByUser User? @relation("JournalEntryCreatedBy", fields: [createdBy], references: [id])
  updatedByUser User? @relation("JournalEntryUpdatedBy", fields: [updatedBy], references: [id])

  @@index([journalId])
  @@index([ledgerId])
  @@index([isActive])
}

enum EntryType {
  DEBIT
  CREDIT
}
